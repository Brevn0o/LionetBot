const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const afkSchema = require('../../Schemas/afkSchema');
const disabled = require("../../Schemas/Panel/Systems/afk");

module.exports = {
    data: new SlashCommandBuilder()
    .setName('afk')
    .setDescription('–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ AFK –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.')
    .addSubcommand(command => command.setName('set').setDescription('–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —É–π—Ç–∏ –≤ AFK..').addStringOption(option => option.setName('–ø—Ä–∏—á–∏–Ω–∞').setDescription('–ë—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É–∫–∞–∑–∞–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —É—à–ª–∏ –≤ AFK.')))
    .addSubcommand(command => command.setName('remove').setDescription('–£–¥–∞–ª—è–µ—Ç –≤–∞—à —Å—Ç–∞—Ç—É—Å AFK.')),
    async execute(interaction) {
        
 const DISABLED = await disabled.findOne({ Guild: interaction.guild.id });

if (DISABLED) {
 await interaction.reply({
 content: "‚ùå –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ!",
 ephemeral: true
});
return;
}
        const { options } = interaction;
        const sub = options.getSubcommand();
 
        const Data = await afkSchema.findOne({ Guild: interaction.guild.id, User: interaction.user.id});
 
        switch (sub) {
            case 'set':
 
            if (Data) return await interaction.reply({ content: `–í—ã **—É–∂–µ** –≤ AFK –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ!`, ephemeral: true});
            else {
                const reason = options.getString('–ø—Ä–∏—á–∏–Ω–∞') || '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã!';
                const nickname = interaction.member.nickname || interaction.user.username;
 
                await afkSchema.create({
                    Guild: interaction.guild.id,
                    User: interaction.user.id,
                    Message: reason,
                    Nickname: nickname
                })
 
                const name = `[–ê–§–ö] ${nickname}`
                await interaction.member.setNickname(`${name}`).catch(err => {
                    return;
                })
 
                const embed = new EmbedBuilder()
                .setColor('Random')
                .setTitle(`${interaction.user.username} —É—à–µ–ª –≤ AFK`)
                .setDescription(`**–ü—Ä–∏—á–∏–Ω–∞**: ${reason}`)
                .setFooter({ text: `–ö—Ç–æ-—Ç–æ —É—à–µ–ª –≤ AFK`})
                .setTimestamp()
 
                interaction.reply({ content: `–¢–µ–ø–µ—Ä—å –≤—ã –≤ **AFK**! \n –≤–≤–µ–¥–∏—Ç–µ **/afk remove** –∏–ª–∏ –Ω–∞–ø–∏—à–º—Ç–µ —á—Ç–æ —Ç–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ..`, ephemeral: true})
                interaction.channel.send({ embeds: [embed] })
            }
 
            break;
 
            case 'remove':
 
            if (!Data) return await interaction.reply({ content: `–í—ã **–Ω–µ** –≤ AFK, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å **–Ω–∏—á–µ–≥–æ**...`, ephemeral: true});
            else {
                const nick = Data.Nickname;
                await afkSchema.deleteMany({ Guild: interaction.guild.id, User: interaction.user.id})
 
                await interaction.member.setNickname(`${nick}`).catch(err => {
                    return;
                })
 
                const embed1 = new EmbedBuilder()
                .setColor('Random')
                .setTitle(`${interaction.user.username} –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –ê–§–ö`)
                .setDescription(`${interaction.user.username} –≤–µ—Ä–Ω—É–ª—Å—è, –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–º—É –ø—Ä–∏–≤–µ—Ç  üëã`)
                .setFooter({ text: `–ö—Ç–æ-—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è`})
                .setTimestamp()
 
                await interaction.reply({ content: `–í—ã **—É–∂–µ –Ω–µ** –≤ AFK! :)`, ephemeral: true})
                interaction.channel.send({ embeds: [embed1]})
            }
        }
    }
}