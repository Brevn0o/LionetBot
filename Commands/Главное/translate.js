const { Client, SlashCommandBuilder, ChatInputCommandInteraction } = require('discord.js')
const translate = require("@iamtraction/google-translate")
const { EmbedBuilder } = require('@discordjs/builders')

module.exports = {
    data: new SlashCommandBuilder()
    .setName("translate")
    .setDescription("–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫!")
    .addStringOption(
        option => 
        option.setName("—Ç–µ–∫—Å—Ç")
        .setDescription("–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏!")
        .setRequired(true))
    .addStringOption(
        option =>
        option.setName("—è–∑—ã–∫")
        .setDescription("–Ø–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏!")
        .addChoices(
            { name: "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", value: "english"},
            { name: "–ì–µ—Ä–º–∞–Ω—Å–∫–∏–π", value: "german"},
            { name: "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", value: "french"},
            { name: "–†—É—Å—Å–∫–∏–π", value: "russian"},
        ).setRequired(true)),
    /**
     * 
     * @param {ChatInputCommandInteraction} interaction 
     * @param {Client} client 
     */
        async execute(interaction, client) {
            

            const { options } = interaction
            const text = options.getString("—Ç–µ–∫—Å—Ç")
            const language = options.getString("—è–∑—ã–∫")

            switch (language) {
                case "english": {
                    const translated = await translate(text, { to: 'en' })
                    send_translated(text, translated.text, interaction, client)
                }
                break;

                case "german": {
                    const translated = await translate(text, { to: 'de' })
                    send_translated(text, translated.text, interaction, client)
                }
                break;

                case "french": {
                    const translated = await translate(text, { to: 'fr' })
                    send_translated(text, translated.text, interaction, client)
                }
                break;

                case "spanish": {
                    const translated = await translate(text, { to: 'sp' })
                    send_translated(text, translated.text, interaction, client)
                }

                case "russian": {
                    const translated = await translate(text, { to: 'ru' })
                    send_translated(text, translated.text, interaction, client)
                }
                break;
            }

    }
}

function send_translated(text, translated, interaction, client) {
    const Response = new EmbedBuilder()
    .setTitle("üåç –ü–µ—Ä–µ–≤–æ–¥")
    .addFields(
        { name: "–°–æ–æ–±—â–µ–Ω–∏–µ:", value: text, inline: true},
        { name: "–ü–µ—Ä–µ–≤–æ–¥:", value: translated, inline: true}
    ).setFooter({text: `–ü–æ–ø—Ä–æ—Å–∏–ª: ${interaction.member.user.username}`, iconURL: interaction.member.user.displayAvatarURL()})

    interaction.channel.send({ embeds: [Response] })
    interaction.reply({content: "–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", ephemeral: true})
}