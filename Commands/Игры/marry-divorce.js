const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');

const marriageSchema = require('../../Schemas/marriageSchema');


module.exports = {
    data: new SlashCommandBuilder()
    .setName('divorce')
    .setDescription("–†–∞–∑–≤–µ—Å—Ç–∏—Å—å —Å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º"),
    
    async execute (interaction) {
        const intUser = interaction.user
        const userData = await marriageSchema.findOne({ marriedUser: intUser.id });
        if (!userData) {
            await interaction.reply({ content: '–í—ã –µ—â–µ –Ω–∏ –Ω–∞ –∫–æ–º –Ω–µ –∂–µ–Ω–∞—Ç—ã!', ephemeral: true})
        } else {
            const marriedToID = userData.marriedTo;
            const embed = new EmbedBuilder()
            .setColor('Random')
            .setTitle("–í—ã —É–≤–µ—Ä–µ–Ω—ã?")
            .setDescription(`${intUser}, –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å —Å <@${marriedToID}>? –í—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –±—Ä–∞–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω/–∞ –ø—Ä–∏–º–µ—Ç`)
            const yes = new ButtonBuilder()
            .setCustomId('yes')
            .setLabel("–î–∞")
            .setStyle(ButtonStyle.Success)
            const no = new ButtonBuilder()
            .setCustomId('no')
            .setLabel("–ù–µ—Ç")
            .setStyle(ButtonStyle.Danger)
            const row = new ActionRowBuilder().addComponents(yes, no)
            const msg = await interaction.reply({
                embeds: [embed],
                components: [row]
            })
            const collector = msg.createMessageComponentCollector()
            collector.on('collect', async (i) => {
                if (!i.isButton()) return;
                if (i.user.id !== interaction.user.id) return await i.deferUpdate();
                if (i.customId === 'yes') {
                const embed = new EmbedBuilder()
                .setColor('Green')
                .setTitle("–¢—ã —Ö–æ–ª–æ—Å—Ç!")
                .setDescription(`–í—ã —Ä–∞–∑–≤–µ–ª–∏—Å—å —Å <@${marriedToID}> –∏ —Ç–µ–ø–µ—Ä—å –æ–¥–∏–Ω–æ–∫–∏! –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!`)
                yes.setDisabled(true)
                no.setDisabled(true)
                
                await marriageSchema.findOneAndDelete({ marriedUser: marriedToID })
                await marriageSchema.findOneAndDelete({ marriedUser: interaction.user.id })

               await i.deferUpdate()
                await interaction.editReply({ embeds: [embed], components: [row] })
                }

                if (i.customId === 'no') {
                    const embed = new EmbedBuilder()
                    .setColor('Green')
                    .setTitle("–¢–≤–æ–π –≤—ã–±–æ—Ä ü§∑")
                    .setDescription(`–í—ã —Ä–µ—à–∏–ª–∏ –Ω–µ —Ä–∞–∑–≤–æ–¥–∏—Ç—å—Å—è —Å <@${marriedToID}>, —Ö–æ—Ä–æ—à–æ..?`)
                    yes.setDisabled(true)
                    no.setDisabled(true)

                    await i.deferUpdate();
                    await interaction.editReply({ embeds: [embed], components: [row] })
                }
            })
        }
    }
}