const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');



const marriageSchema = require('../../Schemas/marriageSchema');





module.exports = {

    data: new SlashCommandBuilder()

    .setName('marry')

    .setDescription("–°–≤–∞–¥—å–±–∞")

    .addUserOption(opt => opt

        .setName('—É—á–∞—Å—Ç–Ω–∏–∫')

        .setDescription("–£—á–∞—Å—Ç–Ω–∏–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è")

        .setRequired(true)),

    

    async execute (interaction) {

        const user = interaction.options.getUser("—É—á–∞—Å—Ç–Ω–∏–∫")

        if (user.bot) return await interaction.reply({ content: '–ß–µ–≥–æ? –ù–∞ –±–æ—Ç–µ –Ω–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è.', ephemeral: true })

        if (interaction.user.id === user.id) return await interaction.reply({ content: '–ù–∞ —Å–µ–±–µ –Ω–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è!', ephemeral: true });

        const intUser = interaction.user

        const intUserData = await marriageSchema.findOne({ marriedUser: intUser.id });

        const userData = await marriageSchema.findOne({ marriedUser: user.id });

        if (!intUserData) {

            if (!userData) {

                const embed = new EmbedBuilder()

                .setColor('Random')

                .setTitle(`–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã?`)

                .setDescription(`${intUser} –•–æ—á–µ—Ç –Ω–∞ —Ç–µ–±–µ –∂–µ–Ω–∏—Ç—å—Å—è! –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?`)

                

                const accept = new ButtonBuilder()

                .setCustomId("accept")

                .setLabel("–î–∞")

                .setStyle(ButtonStyle.Success)



                const deny = new ButtonBuilder()

                .setCustomId("no")

                .setLabel("–ù–µ—Ç")

                .setStyle(ButtonStyle.Danger)

                const row = new ActionRowBuilder().addComponents(accept, deny);

                const msg = await interaction.reply({ 

                content: `${user}`,

                allowedMentions: {

                    parse: ['users']

                },

                embeds: [embed],

                components: [row],

               // fetchReply: true

            })

            const collector = msg.createMessageComponentCollector();

            collector.on('collect', async (i) => {

                if (i.user.id !== user.id) return await i.reply({ content: `–¢–æ–ª—å–∫–æ ${user} –º–æ–∂–µ—Ç –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏!`});

                if (i.customId === 'accept') {

                    embed.setColor('Green')

                    .setTitle("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ")

                    .setDescription(`${intUser} –∏ ${user} –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∂–µ–Ω–∞—Ç—ã!`)

                    

                    accept.setDisabled(true)

                    deny.setDisabled(true)



                    await marriageSchema.create({

                        marriedUser: user.id,

                        marriedTo: intUser.id

                    })

                    await marriageSchema.create({

                        marriedUser: intUser.id,

                        marriedTo: user.id

                    })



                   await i.deferUpdate();

                    await interaction.editReply({ embeds: [embed], content: null, components: [row] })

                }

                if (i.customId === 'no') {

                    embed.setColor('Red')

                    .setTitle("üòî")

                    .setDescription(`${user} –ù–µ —Ö–æ—Ç–µ–ª –Ω–∞ —Ç–µ–±–µ –∂–µ–Ω–∏—Ç—å—Å—è!`)

                    

                    accept.setDisabled(true)

                    deny.setDisabled(true)



                    //await i.deferUpdate();

                    await interaction.reply({ embeds: [embed], content: null, components: [row] })

                }

            })

            } else {

                const embed = new EmbedBuilder()

                .setColor('Red')

                .setTitle("–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –∂–µ–Ω–∞—Ç!")



                await interaction.reply({ embeds: [embed] })

            }

        } else {

            const embed = new EmbedBuilder()

            .setColor('Red')

            .setTitle("–¢—ã —É–∂–µ –∂–µ–Ω–∞—Ç!")



            await interaction.reply({ embeds: [embed] })

        }

    }

}