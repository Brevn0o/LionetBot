const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, PermissionsBitField, ButtonStyle, ButtonBuilder, ChannelType } = require('discord.js');
const pingschema = require('../../Schemas/joinping');

module.exports = {
    data: new SlashCommandBuilder()
    .setName('join-ping')
    .setDescription('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.')
    .addSubcommand(command => command.setName('add').setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∏–Ω–≥').addChannelOption(option => option.setName('–∫–∞–Ω–∞–ª').setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –ø–∏–Ω–≥ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ.').setRequired(true).addChannelTypes(ChannelType.GuildAnnouncement, ChannelType.GuildText)))
    .addSubcommand(command => command.setName('remove').setDescription('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–∏–Ω–≥–∏ –æ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.').addChannelOption(option => option.setName('–∫–∞–Ω–∞–ª').setDescription('–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.').setRequired(true).addChannelTypes(ChannelType.GuildText, ChannelType.GuildAnnouncement)))
    .addSubcommand(command => command.setName('disable').setDescription('–û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –ø–∏–Ω–≥–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é.')),
    async execute(interaction, err) {

        if(!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) return await interaction.reply({ content: '**–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã**', ephemeral: true})
        const sub = interaction.options.getSubcommand();
        const executer = await interaction.user.id;
        const pingdata = await pingschema.findOne({ Guild: interaction.guild.id });
        const channel = await interaction.options.getChannel('–∫–∞–Ω–∞–ª');

        switch (sub) {
            case 'add':

            const pingadded = new EmbedBuilder()
            .setColor('DarkRed')
            .setAuthor({ name: `üîî –°–∏—Å—Ç–µ–º–∞ –ø–∏–Ω–≥–æ–≤`})
            .setFooter({ text: `üîî –ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω`})
            .addFields({ name: `‚Ä¢ –ü–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω`, value: `> –í–∞—à –∫–∞–Ω–∞–ª (${channel}) —Ç–µ–ø–µ—Ä—å \n> –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–º –∫–∞–Ω–∞–ª–æ–º –¥–ª—è \n> –ª—é–±—ã–µ –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏.`})
            .setTimestamp()
            .setTitle('> –ü–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω')
    
            if (!pingdata) {

                await pingschema.create({
                    Guild: interaction.guild.id,
                    Channel: channel.id
                })

                await interaction.reply({ embeds: [pingadded] });

            } else {

                if (pingdata.Channel.includes(channel.id)) return await interaction.reply({ content: `–£ –≤–∞—Å **—É–∂–µ** –µ—Å—Ç—å –ø–∏–Ω–≥ ${channel}!`, ephemeral: true});
                else {
                    await pingschema.updateOne({ Guild: interaction.guild.id }, { $push: { Channel: channel.id }});
                    await interaction.reply({ embeds: [pingadded] });
                }

            }

            break;
            case 'remove':

            const pingremove = new EmbedBuilder()
            .setColor('DarkRed')
            .setAuthor({ name: `üîî –ü–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∞`})
            .setFooter({ text: `üîî –ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–µ –ø–∏–Ω–≥ —É–±—Ä–∞–Ω–∞`})
            .addFields({ name: `‚Ä¢ –ü–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω`, value: `> –í–∞—à –∫–∞–Ω–∞–ª (${channel}) \n> –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–º –∫–∞–Ω–∞–ª–æ–º –¥–ª—è \n> –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`})
            .setTimestamp()
            .setTitle('> –ü–∏–Ω–≥ —É–±—Ä–∞–Ω')
            
            if (!pingdata) return await interaction.reply({ content: `–í—ã **–µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏** –Ω–∏–∫–∞–∫–∏—Ö **–ø–∏–Ω–≥–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è** –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å **–Ω–∏—á–µ–≥–æ**..`, ephemeral: true})
            else {

                if (!pingdata.Channel.includes(channel.id)) return await interaction.reply({ content: `–£ –≤–∞—Å **–Ω–µ** —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∏–Ω–≥ –¥–ª—è ${channel}!`, ephemeral: true});
                else {
                    await pingschema.updateOne({ Guild: interaction.guild.id }, { $pull: { Channel: channel.id }});
                    await interaction.reply({ embeds: [pingremove] });
                }

            }

            break;
            case 'disable':

            const warnembed = new EmbedBuilder()
            .setColor('DarkRed')
            .setAuthor({ name: `üõ† –ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–µ –ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∞`})
            .setTimestamp()
            .setFooter({ text: `üõ† –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!`})
            .setTitle('> –í–∞—É, –ø–æ–º–µ–¥–ª–µ–Ω–Ω–µ–µ!')
            .addFields({ name: `‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ`, value: `> –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–∏—Ç **–í–°–ï** —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è \n> –ø–∏–Ω–≥–∏, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ **/join-ping remove** \n > –µ—Å–ª–∏ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π \n > –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å! `})

            if (!pingdata) return await interaction.reply({ content: `–£ –≤–∞—Å **–Ω–µ—Ç** –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö **–ø–∏–Ω–≥–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è**, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å **–Ω–∏—á–µ–≥–æ**..`, ephemeral: true});
            else {

                if (!pingdata.Channel || pingdata.Channel === [ ]) return await interaction.reply({ content: `–í—ã **—É–∂–µ** –æ—Ç–∫–ª—é—á–∏–ª–∏ –≤—Å–µ —Å–≤–æ–∏ –ø–∏–Ω–≥–∏, –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **/join-ping remove**.`});
                else { 

                    const buttons = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                        .setCustomId('confirm')
                        .setLabel('‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω')
                        .setStyle(ButtonStyle.Success),

                        new ButtonBuilder()
                        .setCustomId('decline')
                        .setLabel('‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å')
                        .setStyle(ButtonStyle.Danger)
                    )

                    const msg = await interaction.reply({ embeds: [warnembed], components: [buttons] });
                    const collector = msg.createMessageComponentCollector();

                    collector.on('collect', async i => {

                        if (i.customId === 'confirm') {
                            if (i.user.id !== executer) return await i.reply({ content: `–í—ã **–Ω–µ –º–æ–∂–µ—Ç–µ** –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏!`, ephemeral: true});
                            await pingschema.deleteMany({ Guild: interaction.guild.id });
                            await i.update({ embeds: [], content: `**–£—Å–ø–µ—à–Ω–æ** —É–¥–∞–ª–µ–Ω—ã **–í–°–ï** –ø–∏–Ω–≥–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞..`, components: []});
                        }

                        if (i.customId === 'decline') {
                            if (i.user.id !== executer) return await i.reply({ content: `–í—ã **–Ω–µ –º–æ–∂–µ—Ç–µ** –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏!`, ephemeral: true});
                            await i.update({ embeds: [], content: `**–û–ø–µ—Ä–∞—Ü–∏—è** –æ—Ç–º–µ–Ω–µ–Ω–∞.`, components: []});
                        }
                    })
                }
            }
        }
    }
 }