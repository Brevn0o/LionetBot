const {
  Client,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  PermissionFlagsBits,
} = require("discord.js");
const automod = require("../../Schemas/automod");
const AntiScam = require("../../Systems/ScamLinks.json");
const UserAM = require("../../Schemas/userAutomod");
const ms = require("ms");

module.exports = {
  name: "messageCreate",
  /**
 * 

 * @param {Client} client 
 */
  async execute(message, client) {
    if (!message.guild) return;
    if (message.author.bot) return;
    if (message.member.permissions.has(PermissionFlagsBits.ManageMessages))
      return;
    const guild = message.guild;
    let requireDB = await automod.findOne({ Guild: guild.id });
    let UserData = await UserAM.findOne({
      Guild: guild.id,
      User: message.author.id,
    });

    if (!requireDB) return;
    if (requireDB.AntiScam == false) return;

    const scamlinks = AntiScam.known_links;

    const embed = new EmbedBuilder()
      .setColor("Random")
      .setDescription(
        `:warning: | <@${message.author.id}> –ø—Ä–∏—Å–ª–∞–ª —Å–∫–∞–º —Å—Å—ã–ª–∫—É.`
      );
    const logChannel = client.channels.cache.get(requireDB.LogChannel);
    if (!UserData) {
      const newData = new UserAM({
        Guild: guild.id,
        User: message.author.id,
        InfractionPoints: 0,
      });
      newData.save();
    }

    for (let i in scamlinks) {
      if (message.content.toLowerCase().includes(scamlinks[i].toLowerCase())) {
        try {
          await message.delete();
        } catch (err) {
          return;
        }

        if (!UserData) {
          const newData = new UserAM({
            Guild: guild.id,
            User: message.author.id,
            InfractionPoints: 1,
          });
          newData.save();
        } else {
          console.log(UserData.InfractionPoints);
          switch (UserData.InfractionPoints) {
            case 3:
              if (!message.member) return;
              const time = ms(requireDB.Timeout);
              await message.member.timeout(time);
              logChannel.send({
                embeds: [
                  new EmbedBuilder()
                    .setColor("Random")
                    .setDescription(
                      `<@${message.author.id}> –±—ã–ª –≤—ã–¥–∞–Ω –º—É—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏\n`
                    ),
                ],
              });
              break;
            case 6:
              if (!message.member) return;
              logChannel.send({
                embeds: [
                  new EmbedBuilder()
                    .setColor("Random")
                    .setDescription(
                      `<@${message.author.id}> –±—ã–ª –∫–∏–∫–Ω—É—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫`
                    ),
                ],
              });
              message.member.send({
                embeds: [
                  new EmbedBuilder()
                    .setColor("Random")
                    .setDescription(
                      `–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ ${message.guild.name} –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏`
                    ),
                ],
              });
              await message.member
                .kick({ reason: "–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏" })
                .then(async () => {
                  await UserAM.findOneAndDelete({
                    Guild: guild,
                    User: message.author.id,
                  });
                });
              break;
            case 8:
              if (!message.member) return;
              message.channel.send(
                `<@${message.author.id}>, —ç—Ç–æ –≤–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫\n–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç`
              );
              break;
            case 10:
              if (!message.member) return;
              logChannel.send({
                embeds: [
                  new EmbedBuilder()
                    .setColor("Random")
                    .setDescription(
                      `<@${message.author.id}> –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫`
                    ),
                ],
              });
              message.member.send({
                embeds: [
                  new EmbedBuilder()
                    .setColor("Random")
                    .setDescription(
                      `–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ ${message.guild.name} –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫`
                    ),
                ],
              });
              await message.member
                .ban({ reason: "–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫" })
                .then(async () => {
                  await UserAM.findOneAndDelete({
                    Guild: guild,
                    User: message.author.id,
                  });
                });
              break;
          }
          UserData.InfractionPoints += 1;
          UserData.save();
        }

        const msg = await message.channel.send({ embeds: [embed] });

        const buttons = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setLabel("–ö–∏–∫")
            .setEmoji("‚öíÔ∏è")
            .setCustomId("kick")
            .setStyle(ButtonStyle.Secondary),
          new ButtonBuilder()
            .setLabel("–ë–∞–Ω")
            .setEmoji("üî®")
            .setCustomId("ban")
            .setStyle(ButtonStyle.Danger)
        );
        setTimeout(async () => {
          await msg.delete();
        }, 5000);
        const text = await logChannel.send({
          embeds: [
            new EmbedBuilder()
              .setColor("Random")
              .setDescription(
                `<@${message.author.id}> –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—É—é —Å—Å—ã–ª–∫—É.\n\`\`\`${message.content}\`\`\``
              ),
          ],
          components: [buttons],
        });
        const col = text.createMessageComponentCollector();
        col.on("collect", async (m) => {
          switch (m.customId) {
            case "kick":
              if (!m.member.permissions.has(PermissionFlagsBits.KickMembers))
                return m.reply({
                  content: "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                  ephemeral: true,
                });
              if (!message.member) {
                return m.reply({
                  content: "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                  ephemeral: true,
                });
              }
              const embed = new EmbedBuilder()
                .setTitle("–ö–∏–∫–Ω—É—Ç")
                .setDescription(
                  `–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ \`${message.guild.name}\` –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫`
                )
                .setColor("Random");

              m.reply({
                content: `–ö–∏–∫–Ω—É—Ç ${message.author.tag}`,
                ephemeral: true,
              });
              message.member
                .send({
                  embeds: [embed],
                })
                .then(() => {
                  message.member.kick({ reason: "–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫" });
                });
              break;
            case "ban":
              if (!m.member.permissions.has(PermissionFlagsBits.KickMembers))
                return m.reply({
                  content: "–£ –º–µ–Ω—è –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –±–∞–Ω",
                  ephemeral: true,
                });
              const embedss = new EmbedBuilder()
                .setTitle("–ö–∏–∫–Ω—É—Ç")
                .setDescription(
                  `–í–∞—Å –∫–∏–∫–Ω—É–ª–∏ –∏–∑ \`${message.guild.name}\` –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏`
                )
                .setColor("Random");
              if (!message.member) {
                return m.reply({
                  content: "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                  ephemeral: true,
                });
              }
              m.reply({
                content: `–ó–∞–±–∞–Ω–µ–Ω ${message.author.tag}`,
                ephemeral: true,
              });
              message.member
                .send({
                  embeds: [embedss],
                })
                .then(() => {
                  message.member.ban({ reason: "–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫" });
                });
              break;
          }
        });
      }
    }
  },
};